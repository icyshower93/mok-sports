here’s a ready-to-apply patch that makes routes lazy (removes the TDZ/“Cannot access 'u' before initialization”) and hardens WebSocket keep-alive on Replit Reserved VM. It also includes an optional tweak to quiet the client ping loop.

How to apply
# from your repo root on Replit VM
git checkout -b fix/tdz-lazy-routes-ws-timeouts

# Save the patch to a file named fix.patch, then:
git apply --index fix.patch
git commit -m "fix: lazy-load routes to avoid TDZ + tune server keep-alive for WS on Reserved VM (optional: quiet client ping)"
git push -u origin fix/tdz-lazy-routes-ws-timeouts


Create a PR from that branch and deploy.

The patch (save as fix.patch)
*** a/client/src/App.tsx
--- b/client/src/App.tsx
@@
-import React from "react";
-import { Switch, Route } from "react-router-dom";
-import MainPage from "@/pages/main";
-import ProfilePage from "@/pages/profile";
-import StablePage from "@/pages/teams";
-import LeaguePage from "@/pages/league";
-import ScoresPage from "@/pages/scores";
-import AgentsPage from "@/pages/agents";
-import MorePage from "@/pages/more";
-import TradesPage from "@/pages/trades";
-import AdminPanel from "@/pages/admin";
-import DatabaseViewer from "@/pages/database-viewer";
-import { LeagueWaiting } from "@/pages/league-waiting";
-import NotFound from "@/pages/not-found";
+import React, { lazy, Suspense } from "react";
+import { Switch, Route } from "react-router-dom";
+// Lazily import pages to defer module evaluation until route visit.
+// This avoids early module execution that was triggering a TDZ crash in prod.
+const MainPage = lazy(() => import("@/pages/main"));
+const ProfilePage = lazy(() => import("@/pages/profile"));
+const StablePage = lazy(() => import("@/pages/teams"));
+const LeaguePage = lazy(() => import("@/pages/league"));
+const ScoresPage = lazy(() => import("@/pages/scores"));
+const AgentsPage = lazy(() => import("@/pages/agents"));
+const MorePage = lazy(() => import("@/pages/more"));
+const TradesPage = lazy(() => import("@/pages/trades"));
+const AdminPanel = lazy(() => import("@/pages/admin"));
+const DatabaseViewer = lazy(() => import("@/pages/database-viewer"));
+const LeagueWaiting = lazy(() =>
+  import("@/pages/league-waiting").then(m => ({ default: m.LeagueWaiting }))
+);
+const NotFound = lazy(() => import("@/pages/not-found"));
@@
-  return (
-    <>
-      <Switch>
-        <Route exact path="/" component={MainPage} />
-        <Route path="/profile" component={ProfilePage} />
-        <Route path="/teams" component={StablePage} />
-        <Route path="/league" component={LeaguePage} />
-        <Route path="/scores" component={ScoresPage} />
-        <Route path="/agents" component={AgentsPage} />
-        <Route path="/more" component={MorePage} />
-        <Route path="/trades" component={TradesPage} />
-        <Route path="/admin" component={AdminPanel} />
-        <Route path="/db" component={DatabaseViewer} />
-        <Route path="/league-waiting" component={LeagueWaiting} />
-        <Route component={NotFound} />
-      </Switch>
-      {!isPWA && window.innerWidth >= 768 && <DesktopNotice />}
-    </>
-  );
+  return (
+    <Suspense
+      fallback={
+        <div className="min-h-screen grid place-items-center">
+          <div className="text-center">
+            <div
+              style={{
+                width: 40,
+                height: 40,
+                border: "4px solid #10b981",
+                borderTop: "2px solid transparent",
+                borderRadius: "50%",
+                animation: "spin 1s linear infinite",
+                margin: "0 auto 16px auto",
+              }}
+            />
+            <p>Loading…</p>
+          </div>
+        </div>
+      }
+    >
+      <Switch>
+        <Route exact path="/" component={MainPage} />
+        <Route path="/profile" component={ProfilePage} />
+        <Route path="/teams" component={StablePage} />
+        <Route path="/league" component={LeaguePage} />
+        <Route path="/scores" component={ScoresPage} />
+        <Route path="/agents" component={AgentsPage} />
+        <Route path="/more" component={MorePage} />
+        <Route path="/trades" component={TradesPage} />
+        <Route path="/admin" component={AdminPanel} />
+        <Route path="/db" component={DatabaseViewer} />
+        <Route path="/league-waiting" component={LeagueWaiting} />
+        <Route component={NotFound} />
+      </Switch>
+      {!isPWA && window.innerWidth >= 768 && <DesktopNotice />}
+    </Suspense>
+  );
 }
 
*** a/server/index.ts
--- b/server/index.ts
@@
-  const server = http.createServer(app);
+  const server = http.createServer(app);
+  // --- WS/Proxy keep-alive hardening for Replit Reserved VM ---
+  // Prevent the proxy from killing idle upgraded sockets.
+  // These values should exceed any L4/L7 idle cutoffs.
+  server.keepAliveTimeout = 120_000; // 120s
+  server.headersTimeout   = 125_000; // must be > keepAliveTimeout
+  // Disable per-request idle timeout (we rely on app-level timeouts instead)
+  server.requestTimeout   = 0;
 
   // existing ws upgrade & listen code below…
 
*** a/client/src/hooks/use-production-realtime.ts
--- b/client/src/hooks/use-production-realtime.ts
@@
-// How often to send an app-level keepalive ping (server also sends control pings)
-const keepaliveInterval = 25000; // 25s
+// How often to send an app-level keepalive ping.
+// On Reserved VM, the server already sends control-frame pings; this can be 0 to rely on server only.
+const keepaliveInterval = 0; // set to 25000 if you prefer client pings
 
@@
-  useEffect(() => {
-    if (!wsRef.current) return;
-    const id = window.setInterval(() => {
-      try {
-        wsRef.current?.send(JSON.stringify({ type: "ping" }));
-        log("[ProductionRealtime] 💓 Sending keepalive ping");
-      } catch {}
-    }, keepaliveInterval);
-    return () => window.clearInterval(id);
-  }, [connected]);
+  useEffect(() => {
+    if (!wsRef.current || !keepaliveInterval) return;
+    const id = window.setInterval(() => {
+      try {
+        wsRef.current?.send(JSON.stringify({ type: "ping" }));
+        log("[ProductionRealtime] 💓 Sending keepalive ping");
+      } catch {}
+    }, keepaliveInterval);
+    return () => window.clearInterval(id);
+  }, [connected, keepaliveInterval]);

What to expect after deploy

On first load you should not see ReferenceError: Cannot access 'u' before initialization.

WebSocket should connect, subscribe, and maintain healthy ping/pong without intermittent 1006 closes.

If you prefer to keep the client ping loop, set keepaliveInterval back to 25000 — the server timeouts patch alone stabilizes WS.